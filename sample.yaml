#!./output/bin/main --config

vhost:
  - name: "first"
    endpoint: ':18080'
    read_timeout: 10
    write_timeout: 10
    max_header_size: 100000

    service:
      - name: !eval "'body' + '_sign'"
        tag: !eval "str::to_upper('a very simple service')"
        router: 
          path: "/impl/body-sign/{op}/{method}"
          method:
              - "POST"
        max_session_size: 500

        policy: |
          error => {
            dprint(phase, error);
            status => 503;
            body => "whatever shit: {{phase}} => {{error}}\n";
          }

          // sign policy, used for handling signing result
          sign => {
            status => 200;
            header_set => ("x-body-sign-final-result", sign);
            header_set => ("x-body-sign-method", signMethod);

            // notes, we need to use signBody, since the original body has been
            // consumed up
            body => signBody;
          };

          // policy for handling verification result
          // reject means the verification failed; pass means the verification
          // passed
          reject => {
            status => 404;
            header_set  => [
              ("x-body-sign-result", sign),
              ("x-body-sign-expect", signExpect)
            ];

            // notes, we need to use signBody, since the original body has been
            // consumed up
            body => signBody;
          };

          pass => {
            status => 202;
            header_set => [
              ("x-body-sign-result", sign),
              ("x-body-sign-expect", signExpect)
            ];
            body => signBody;
          };

          log => {
            dprint(logFormat);
          }

      - name: "null"
        tag: !env "PATH"
        router: 
          path: "/impl/concate"
          method:
            - "GET"
        max_session_size: 100
        policy: !inc_string "./code.pl"

      - name: "null"
        tag: "basic proxy"
        router: 
          path: "/impl/null"
          method:
            - "GET"
        config:
          a: "bb"
          c: "dd"
        max_session_size: 500
        policy: |
          response => {
            let proxy_url = request.header.x_proxy_url;
            let url = proxy_url == "" ? "https://tmall.com" : proxy_url;
            let sub_resp = http::do(url, "GET");
            body => if sub_resp.status == 200 {
              sub_resp.body;
            } else {
              "the response status code is {{sub_resp.status}} which is not 200";
            };
            status => sub_resp.status;
          };
